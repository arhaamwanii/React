                       REACT

-front end framework
-there are seme custom elements in this which are not in traditional one
-mixing of different type of files(HTML, CSS, JS)
-we can differentite things in react using which then we can make that single thing do a thing without refreshing the whole website
-Re-renders this only in that part





                            ES6

TEMPLATE LITERALS 

- they can be creates using   ``
-it is a way to work with  strings
-Combining strings using template literals = 
    >`` you have to put the whole content in backticks
    > ${} using this the variable or the text can be specified
            let name1 = prompt("You first name");
            let name2 = prompt("Your last name");

            let fullName = `${name1} ${name2}`

            document.getElementById("example").innerHTML = fullName;

STRUCTURING OBJECTS

-it is used to bind values from the objects to a Variable
       -const me = { 
            name: "arham",
            age: "17 year and 3 month ",
            ability: "obsession",
        }

        const {name, age , ability } = me;

        let all = (`${name}  ${age}  ${ability}` )

        document.getElementById("heading").innerHTML = all ;

        console.log(all);

-const{name , age , ability} = me;
-this is used to to name the variables to be used outside as well - "name: hello" this can be used to reaname the thing outside the object 


DESTRUCTURING ARRAYS

you are basically making variable and a array at the same time time  

    let [one , two , three , four , five ] = ['arham' , 23 , "amin" , "wani" , "12342342"];

OBJECT LITERALS
-



FOR OF 
-it is basically used to loop of the whole thing, and see the value individually

    let  full = [200 , 600 , 400];

    for ( const text of full){
        console.log(text);
    }

SPRED OPERATORS

-making a copy of an array or objects

 -  let contacts = ["Mary", "Joel", "Danny"];

    let personalFriends = ["david",  ...contacts , "lilly" ];

    contacts.push("John");

    console.log(personalFriends);

- "...variablename" this here creates a copy of the array or ojject isde the new object
OBJECT

-   let employee = {
        ...person,
        salary: 50000,
        position: "Software Developer"
    }

    console.log(employee);

REST OPERATORS

if you write a function and dont know how many paramertes will be entered you can use this

    function add(...nums) {
        
        console.log(nums);
    }

    add(4, 5, 7, 8, 12)

-...nums is used to take more than one parameter as imputs

ARROW FUNCTIONS

-       const dinnerMenu = (food) => {
            return `I'm going to eat a ${food} for dinner`;
        }

        console.log( dinnerMenu("chicken salad") );


ANONYMOUS FUNCTION 

-they are used to make functions  inside functions which are not to be used any where else


DEFAULT PARAMS
- it is used to make put in default paramerter, in case no prameter is passed while calling the function
-   const leadSinger = (artist = "someone")

-in this case if you dont put in the value while calllig the function someone will aoutomatically be put in.


.indexOf
-it is used to count number of charecters and also the number of elements inside an arary

.includes
it is used to check wether an array has that element or not



cost 
-in this case you cant change the data type 
-you can push a value inside a array or a object which is defined via const 
-text

padStart & padIn
-add numbers or text in the string or ending to make the string fit the the length you want it to be


THIS 
    function yourName(name){

        let legs = "anything" ;

        this.legs = name;
        console.log(this.legs)
    
        console.log(legs)
    }

    yourName("Arham Amin Wani");


OBJECT ORIENTED PROGRAMMING

-Object-oriented programming (OOP) is a programming paradigm that uses objects and classes for organizing and structuring code. It is a way of designing software using the concept of objects, which can contain data in the form of fields (often known as attributes or properties) and code, in the form of procedures (often known as methods).
-it has to do with, classes , obejects and methods... you can predefine stuff
-centeren around objects, rather than FUNCTIONS
-It also has specific propeties
-Method is basically an function inside a object
-4 PILLARS

ENCAPSULATION

     let myDetails = {
        name: "Arham",
        residency: "Dalgate",
        age: "17 years and 3 months",
        timeIn: 18,
        laverage: 3,
        outPut: function(){
            return this.timeIn * this.laverage;
        }
    };


    let out = myDetails.outPut(45 , 11000);
    
    console.log(out);

ABSTRACTION

    -complexity is hidden
    -reduces impact of change
    -we can call  a specific thing only and we are good to go

INHERITANCE

    - we can first define things that allow us to communicate with the html and other stuff than we can simply call those and use them insted

POLY-MORPHISHM

    -get rid of if else complexity
    -refacrtor switch case statements 



FACTORY 

function fst(radius){
    return {

        //ket value pairs - PROPERTIES
        
            pp: radius =  "2442",
        
        //FUNCTION - METHOD(logic)
        
            draw: function(){
                console.log(radius);
            },

            one: function() {console.log(radius)}
        };
        
}

const prduct1 =  fst(144);

prduct1.draw();

console.log(prduct1)


//we created a function/factory and we named it fst -- we put in the a parameter which we are going to use to diffenrntite between the differnt objects this factory is going to return us
//inside there wer put in a property and an method, 
    //in the property we redfined the value of radius, which otheerwise we had defined when calling the function
    //in the function we put a loggig the value of radius on the cosole command
//then we called this ffactory using paramerters and then stored the value in const "product1",
//what it basically did is that created a new object and stored that value in product1 - with the parameter provided while calling the function 
//now we can acess that object using the "prduct1" keyword and can acess its properties and method like this
    //product1.propertyName         
    //product1.methodName()


CONSTRUCTORS
-it is used to determine the parameters specific to the object we are going to create  using the class thing


























CLASSES 
-it is a template, balnk form\

CONSTRUCTOR
-it is basically used as a input mehtod to make a copy based on the same TEMPLATE

Object
-your information,
-object is subjective.. varies from person to person
-













            



